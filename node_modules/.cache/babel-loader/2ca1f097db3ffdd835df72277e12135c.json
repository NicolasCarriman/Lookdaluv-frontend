{"ast":null,"code":"import { fetchWithoutToken, fetchWithToken } from \"../helpers/fetch\";\nimport { types } from \"../types/types\";\nexport const startLogin = (username, password) => {\n  return async dispatch => {\n    const response = await fetchWithoutToken('login/', {\n      username,\n      password\n    }, 'POST');\n    const body = await response.json();\n    console.log(body);\n    console.log(response.status);\n\n    if (response.status === 200 || response.status === 201) {\n      // set user info\n      localStorage.setItem('token', body.token);\n      localStorage.setItem('username', body.user.username);\n      localStorage.setItem('email', body.user.email);\n      localStorage.setItem('name', body.user.name);\n      localStorage.setItem('last_name', body.user.last_name);\n      dispatch(login({\n        token: body.token,\n        username: body.user.username\n      }));\n      return response.status;\n    } else {\n      console.log(body.error);\n    }\n  };\n};\nexport const startChecking = () => {\n  return async dispatch => {\n    const response = await fetchWithToken('refresh-token/');\n    const body = await response.json();\n\n    if (response.status === 200 || response.status === 201) {\n      // set user info\n      localStorage.setItem('token', body.token);\n      localStorage.setItem('username', body.user.username);\n      localStorage.setItem('email', body.user.email);\n      localStorage.setItem('name', body.user.name);\n      localStorage.setItem('last_name', body.user.last_name);\n      dispatch(login({\n        token: body.token,\n        username: body.user.username\n      }));\n      return response.status;\n    } else {\n      dispatch(checkingFinish());\n    }\n  };\n};\n\nconst checkingFinish = () => ({\n  type: types.authCheckingFinish\n});\n\nconst login = user => ({\n  type: types.login,\n  payload: user\n});","map":{"version":3,"sources":["C:/Users/nicol/OneDrive/Documentos/GitHub/lookdaluv-frontend/src/actions/auth.js"],"names":["fetchWithoutToken","fetchWithToken","types","startLogin","username","password","dispatch","response","body","json","console","log","status","localStorage","setItem","token","user","email","name","last_name","login","error","startChecking","checkingFinish","type","authCheckingFinish","payload"],"mappings":"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","sourcesContent":["import { fetchWithoutToken, fetchWithToken } from \"../helpers/fetch\";\r\nimport { types } from \"../types/types\";\r\n\r\n\r\nexport const startLogin = (username, password) => {\r\n\r\n    return async( dispatch ) => {\r\n        const response = await fetchWithoutToken(\r\n                                'login/',\r\n                                { username, password },\r\n                                'POST',\r\n                            );\r\n        const body = await response.json();\r\n\r\n        console.log(body);\r\n        console.log(response.status);\r\n\r\n        if (response.status === 200 || response.status === 201){\r\n\r\n            // set user info\r\n            localStorage.setItem('token', body.token);\r\n            localStorage.setItem('username', body.user.username);\r\n            localStorage.setItem('email', body.user.email);\r\n            localStorage.setItem('name', body.user.name);\r\n            localStorage.setItem('last_name', body.user.last_name);\r\n\r\n            dispatch( login({\r\n                token: body.token,\r\n                username: body.user.username\r\n            }));\r\n\r\n            return response.status\r\n        }else{\r\n            console.log(body.error);\r\n        }\r\n    }\r\n}\r\n\r\nexport const startChecking = () => {\r\n\r\n    return async(dispatch) =>{\r\n\r\n        const response = await fetchWithToken( 'refresh-token/' );\r\n        const body = await response.json();\r\n        \r\n\r\n        if ( response.status === 200 ||  response.status === 201 ){\r\n\r\n            // set user info\r\n            localStorage.setItem('token',body.token);\r\n            localStorage.setItem('username',body.user.username);\r\n            localStorage.setItem('email',body.user.email);\r\n            localStorage.setItem('name',body.user.name);\r\n            localStorage.setItem('last_name',body.user.last_name);\r\n\r\n            dispatch( login({\r\n                token: body.token,\r\n                username: body.user.username\r\n            }) );\r\n            return response.status;\r\n        }else{\r\n            dispatch( checkingFinish() );\r\n        }\r\n\r\n    }\r\n}\r\n\r\nconst checkingFinish = () => ({ type: types.authCheckingFinish })\r\n\r\nconst login = ( user ) => ({\r\n    type: types.login,\r\n    payload: user\r\n})"]},"metadata":{},"sourceType":"module"}